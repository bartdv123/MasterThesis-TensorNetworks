using LaTeXStrings

"""
Tree approximation of a 2x6_d5 random quantum circuit
--> Make a local error plot, error at which step in the approximation and how this propagates globally
"""

chi_list = [32, 28, 24, 20, 18, 16, 14, 12, 8]
global_error_list = [0.9449411329490777, 0.9483070743280413, 0.9663390976904886, 0.9864195408196743, 0.9941745099038068, 0.9983484072453204, 0.996432095966956, 0.9920943055952794, 0.9996603127608901]
largest_local_error_lists = [[0.0, 4.440892098500626e-16, 1.1102230246251565e-16, 2.220446049250313e-16, -2.220446049250313e-16, 0.5000000000000001, 6.661338147750939e-16, -2.220446049250313e-16, -6.661338147750939e-16, 3.3306690738754696e-16, -6.661338147750939e-16, 0.5697020619735178, 3.3306690738754696e-16, 0.46608718388577053, 2.220446049250313e-16, 0.613827455310279, 0.4806444293928994, 0.5667251242589324, 0.4167978802437913]
,[-6.661338147750939e-16, 3.3306690738754696e-16, 2.220446049250313e-16, 0.0, 0.0, 0.5624999999999999, 0.008151949366046685, -4.440892098500626e-16, 0.019192076373219846, -2.220446049250313e-16, 0.0, 0.5803784846099505, 1.1102230246251565e-16, 0.5055334879646203, -4.440892098500626e-16, 0.7188097232489037, 0.5403694870539767, 0.5442246831064602, 0.5192303869618408]
, [0.0, -2.220446049250313e-16, -4.440892098500626e-16, -2.220446049250313e-16, -6.661338147750939e-16, 0.625, 0.017320717101041327, -2.220446049250313e-16, 0.03789733767175407, -6.661338147750939e-16, -2.220446049250313e-16, 0.6026162319494027, 4.440892098500626e-16, 0.4306841588888938, 0.0, 0.699478069720786, 0.5005456707741784, 0.5883228639809442, 0.47930029600123425]
,[-2.220446049250313e-16, 0.0, 6.661338147750939e-16, -2.220446049250313e-16, 1.1102230246251565e-16, 0.6875, 0.025708790972976736, -2.220446049250313e-16, 0.054927180538196896, 3.3306690738754696e-16, 3.3306690738754696e-16, 0.6273720613066687, 0.0, 0.33725388052393446, 4.440892098500626e-16, 0.6972397853439596, 0.5683944232074144, 0.41767731513356077, 0.48724450064042624],
[-4.440892098500626e-16, 0.0, -2.220446049250313e-16, 2.220446049250313e-16, -2.220446049250313e-16, 0.71875, 0.0354058351565224, 3.3306690738754696e-16, 0.07874069742233847, -2.220446049250313e-16, 5.551115123125783e-16, 0.6294032448665985, 6.661338147750939e-16, 0.3458705640675631, 5.551115123125783e-16, 0.6976109949023108, 0.5835586491749851, 0.37395457737828497, 0.5629153910307992],
[3.3306690738754696e-16, 3.3306690738754696e-16, -4.440892098500626e-16, -2.220446049250313e-16, 0.0, 0.75, 0.04134464259668158, 2.220446049250313e-16, 0.09073579815097821, 3.3306690738754696e-16, -2.220446049250313e-16, 0.671275525705773, -6.661338147750939e-16, 0.22378995348129627, -2.220446049250313e-16, 0.6888951977523396, 0.5374890194097979, 0.5026144507072792, 0.46187814479532574],
[-4.440892098500626e-16, 2.220446049250313e-16, -2.220446049250313e-16, 2.220446049250313e-16, 0.0, 0.7500096000983851, 0.027070204020295696, -4.440892098500626e-16, 0.07845278791255517, 0.11024093784706124, 0.0, 0.6396200045072351, 0.025119006171997138, 0.27175329275744664, 0.0621594283878899, 0.6178359129272093, 0.486570614698582, 0.39146161200714813, 0.5090385764618335],
[-2.220446049250313e-16, -2.220446049250313e-16, 1.1102230246251565e-16, 2.220446049250313e-16, -2.220446049250313e-16, 0.7528678306062552, 0.009530888294667528, 2.220446049250313e-16, 0.06894476726813348, 0.10667357390602594, 6.661338147750939e-16, 0.5286926291693133, 0.1343485750572454, 0.2806989028250393, 0.16419094248243704, 0.6113155427649177, 0.3563529834128023, 0.4871362553017783, 0.24473465639938852],
[2.220446049250313e-16, 2.220446049250313e-16, 4.440892098500626e-16, 2.220446049250313e-16, -4.440892098500626e-16, 0.7919049295387741, 0.0398010638455335, -2.220446049250313e-16, 0.051548354132220364, 0.13602881033599856, -2.220446049250313e-16, 0.4899374516223639, 0.30639534272309277, 0.46098504334650614, 0.33804247126494724, 0.46830343473270253, 0.46130908084096667, 0.4105672862767502, 0.4085067180953649]]
loop_cost_list = [375120, 375120, 375120, 375120, 375120, 375120, 375120, 375120, 375120]
tree_cost_list = [1126400, 591360, 456192, 349440, 300672, 254976, 208768 ,114048, 63232]

using Makie
using CairoMakie
using ColorSchemes
using Colors
using Plots



p = (Plots.scatter(chi_list, global_error_list, xticks=(chi_list, chi_list),
              xlabel=L"\chi_{max}", ylabel="Global error = 1 - F",
              legend=nothing))
Plots.plot!(chi_list, global_error_list, color=colorant"lightseagreen", linestyle=:dot, linewidth=3, legend=false,opacity=0.1)             

savefig(p,"global_error_chi.svg")
display(p)

p = (Plots.scatter(chi_list, tree_cost_list./ loop_cost_list, xticks=(chi_list, chi_list),
              xlabel=L"\chi_{max}", ylabel="Relative greedy contraction cost",
              legend=nothing))
Plots.plot!(chi_list, tree_cost_list./ loop_cost_list, color=colorant"lightseagreen", linestyle=:dot, linewidth=3, legend=false,opacity=0.1)             

savefig(p,"relative_tree_loop_costs.svg")
display(p)


l1 = [3.3306690738754696e-16, 3.3306690738754696e-16, -4.440892098500626e-16, -2.220446049250313e-16, 0.0, 0.75, 0.04134464259668158, 2.220446049250313e-16, 0.09073579815097821, 3.3306690738754696e-16, -2.220446049250313e-16, 0.671275525705773, -6.661338147750939e-16, 0.22378995348129627, -2.220446049250313e-16, 0.6888951977523396, 0.5374890194097979, 0.5026144507072792, 0.46187814479532574]
l2 = [-4.440892098500626e-16, 2.220446049250313e-16, -2.220446049250313e-16, 2.220446049250313e-16, 0.0, 0.7500096000983851, 0.027070204020295696, -4.440892098500626e-16, 0.07845278791255517, 0.11024093784706124, 0.0, 0.6396200045072351, 0.025119006171997138, 0.27175329275744664, 0.0621594283878899, 0.6178359129272093, 0.486570614698582, 0.39146161200714813, 0.5090385764618335]
l3 = [-2.220446049250313e-16, -2.220446049250313e-16, 1.1102230246251565e-16, 2.220446049250313e-16, -2.220446049250313e-16, 0.7528678306062552, 0.009530888294667528, 2.220446049250313e-16, 0.06894476726813348, 0.10667357390602594, 6.661338147750939e-16, 0.5286926291693133, 0.1343485750572454, 0.2806989028250393, 0.16419094248243704, 0.6113155427649177, 0.3563529834128023, 0.4871362553017783, 0.24473465639938852]


# Replace very small values with 1
l1_new = map(x -> abs(x) < 1e-14 ? 1 : x, l1)
l2_new = map(x -> abs(x) < 1e-14 ? 1 : x, l2)
l3_new = map(x -> abs(x) < 1e-14 ? 1 : x, l3)

using CairoMakie

# Calculate ratios
divided21 = l2_new ./ l1_new
divided31 = l3_new ./ l1_new

# X-axis values
cycles = collect(1:19)
kwargs = (; xminorticksvisible = false, xminorgridvisible = false)

# Create the scatter plot
figure = Figure()

ax = Axis(figure[1, 1],
          xlabel = "Approximation step", xticks = cycles,
          ylabel = "Relative local errors"; xminorticks = IntervalsBetween(5), kwargs...)

CairoMakie.scatter!(ax, cycles, divided21, label=L"\frac{\chi_i}{\chi_j} = \frac{14}{16}")
CairoMakie.scatter!(ax, cycles, divided31, label=L"\frac{\chi_i}{\chi_j} = \frac{12}{16}")

# Set limits for the y-axis
# Set limits for the y-axis
axislegend(ax)

# Display the plot
display(figure)